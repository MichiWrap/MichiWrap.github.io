Basics in CSS

- Nameoftag : selects any tag w/ that name.
- #nameofid : id="nameofid"
- .nameclass : class="nameclass"  
- NameoftagOne, NameoftagTwo : for both
- * : selects everything.

Hierarchies
- E1 E2 : elem2 is a desc of Elem1	<section><p> .... </p> ....
- E1 > E2 : Elem2 is a direct child of E1 <footer> <p>.....</p> </footer></section>
- E1 + E2 : E2 placed immediately after E1. (at same level.)
- E1 ~ E2 : E2 placed after E1 (at the same level.)

Narrowing
[attr] -> Elem w/ that attribute (regardless of value)
[attr=value] -> ...With regards to value (being same)
[attr*=val] -> Elem w/ attr containing the word val.
[attr^=val] -> Elem whose attr starts with val.
[attr$=val] -> Elem whose attr ends with val.

Pseudo Elements (::), Pseudo Classes (:)
section>P::first-letter
Section>P::first-line { color:blue;}

Intelligent Narrowing
::first-letter, ::first-line
:first-child, :last-child
:nth-child(1), :nth-last-child(1)
:first-of-type, last-of-type, only-of-type
:only-child
an+b for child()

:empty - tag w/ no children
::selection -> Items selected w/ mouse

Selecting Based On State

:link, :visited, :active, :hover
:focus - for input tags in forms
:disabled :enabled :checked
:target - useful w/ anchor targets, like #test:
:not(selecter) - Anything not in a certain thing (like paragraph)
:root  - root of the document.

Using CS3 to add Content
:before & :after

Font
font-family:"Times New Roman", Verdana, Serif;
options include serif, sans-serif, and monospace.

Styling Backgrounds

background-color:#F0F000
background-image: url('file.gif')
background-repeat: repeat, repeat-x/y, no-repeat, inherit
 - inherit: do whatever the parent has (default)
background-attachment: scroll, fixed, inherit
background-position:
- [left right center] [top center bottom]
- x% y%  (from 0% 0% top left to 100% 100% bottom right)
- xpos ypos (in pixels)

 background { background: #cccccc url('pic.png') no-repeat right top;}
 
 rgba(255, 0, 0, .5) : A red with a 50% transparency.
 
background-size:
 - length e.g. 80px 60px (don't bother)
 - percentage
 - cover
 - contain
 
 background-origin (for images):
 - padding-box
 - border-box
 - content-box
 
Content, padding, border, margin

Ex: margin 5px;   		//Will be all over
border: 1 px solid black;	//Also all around
padding: 5px 10px; 		//T&B have 5, L&R have 10
width: 200px;
height: 50px;

Text Styling

color: #ff0000, rgb(255,0,0), red, rgba(255,0,0,0.9)
text-align: center, right, left, justify
text-decoration: none, overline, line-through, underline, blink
text-transform: uppercase, lowercase, capitalize
text-indent: 25px; (indents first line)
letter-spacing: positive or negative value (ex: -3px)
vertical-align:
- length or percentage (negative OK)
- baseline,s ub, super, top, text-top, middle, bottom, text-bottom, inherit
white-space: normal, nowrap, pre, pre-line, pre-wrap
- pre keeps exactly as is.
- pre-line skips everything but the new lines.
- pre-wrap wraps text for you, but respects all the fun stuff you did
word-spacing: positive or negative value
text-shadow:
- horizontal, vertical, blur distance, color
- eg: text-shadow: 5px 5px 5px #840000;
word-wrap: normal or break-word
Multi column layouts:
- column-count & column-gap
- You may need to add -webkit- or -moz-, -ms-, -o-
ex:
column-count:2;

Fonts
font-family Serif/Sans-Serif/Monospace, "Actual Font Name"
font-style: normal/italic/oblique
font-variant: normal/small-caps
font-weight: normal/bold/bolder/lighter
- Number from 100 to 900
font-size:
Try to use the unit em!
to avoid issues, use 100% on your text body

Styling Lists
list-style-type:
- For unordered use circl, disc, none, square
- For ordered, many options: armenian, cjk-ideographic, decimal, decimal-leading-zero,
	iroha, katakana, and so on....
list-style-image: url('file.png');
list-style-position: inside or outside
display: inline; in your li items so that they show in a line

Box Properties
border-style: none, dotted, dashed, solid, double, groove, ridge, inset, outset
border-width: thin, medium, think  OR a number of pixels.
border-color

display:none removes it from the page,
visibility:hidden only makes it unseeable but still there.

Positioning
Static (default) - Position decided by the normal flow of the page, unaffected by top, bottom, left, and right
Fixed	 - Position relative to Browser Window
Relative - Relative to its normal position (can take negative values)
Absolute - Relative to the first parent element that is not static ( or <html> if no such parent)

Position Properties
- top, right, left & bottom: (auto, length, %)
- clip: rect(top, right, bottom, left)
 - Allows to cut an absolutely positioned element
- overflow: (auto, hidden, scroll, visible)
- position: (absolute, fixed, relative, static)
- z-index: (number, auto)

Floating Items : float: right or left
clear: left/right/both/none/inherit

cursor:
- url('image.gif'), url('something.cur'), auto;
- crosshair
- default
- {n, ne, e, se, s, sw, w, nw}-resize
 ex: se-resize
- help
- move, pointer, progress, text, wait

Media Queries
- @media screen and (max-width: 400px)
{
 regular stylesheet stuff (body{}, etc) here
}
<link rel="stylesheet" media="screen and (max-device-width: 480px)" 
	href="styles/small.css" />
	
mult backgrounds
background-image: url(./st.jpg), url(./bg.jpg);
background-size: 4em auto, 100%, 100%;
background-position: bottom right, 0 0;
background-repeat: no-repear, no-repeat;

display:
- Seen: none, inline (the default)
- Block
	Allows you to treat the item as an individual block, 
	will automatically break around it.
-Inline-block
	Puts item as a block but on the same line as prev item
	If you don't have enough room, they are placed on next
	line, otherwise they'll fit in.
- Table

FlexBox
display: flex; //Must pre-pend -moz- or -webkit-
flex-direction: column;  //or row, row-reverse, column-reverse
flex-wrap: wrap; // or nowrap, wrap-reverse
flex-flow: row wrap; // combines direction & wrap

visibility: collapse - ensure cross-size remains when item hidden

flex-basis:
	Sets the "initial" main size of the flex item before free space
	is distributed
flex-shrink:
	Takes a number (default being 1) with the shrink factor
	of a flex item
	The # represents a ratio compared to other items
	0 means no shrink
	2 means shrink twice as much as those with 1
flex-grow:
	Takes a number (default being 1) with the grow factor
flex: <grow><shrink><basis>

flex: 0 auto; or flex: initial;
	Makes the item shrinkable but not growable
flex: auto;
	shares the extra free space, absorbed evenly by auto
flex:none
	Same as 0 0 auto, items become inflexible
flex: positive number

justify-content:
	flex-start : left to right
	flex-end : right to left
	center : centered
	space-between : spreads them out takes all space
	space-around : Any empty space
	
Transitions
transition-property: attributes affected
transition-duration:
transition-timing-function:
transition-delay:
transition: property duration timing delay
Timing Funcs:  ease, linear, ease-in, ease-out, 
			ease-in-out, step-start, step-end
			steps(number, [start | end])
			cubic-bezier(num, num, num, num)
transform:
	none
	matrix(n,n,n,n,n,n), matrix3d
	tramslate(x,y) , translate3d(x,y,z)
	translateX(x), translateY(y)
	scale(x,y) , x,y,z , scaleX(x) (in fraction/percents)
	rotate(angle) ex: 90deg, cc 
	rotate(x,y,z,angle), rotateX,Y,Z
	skew(x-angle,y-angle) skewX
	perspective(n)
	
JQuery
$(document).ready(function() { //work  });
jquery.holdReady(bool)
$(css_selector)
$.when(deferreds)
JQ Events:
.blur() , .change .click .dblclick .error .focus
.hover .keydown .keyup .keypress.keyup .load()
.mousedown .mouseenter .mouseleave .mousemove
.mouseout .mouseover .mouseup
.resize .scroll .select .submit .unload

$(this).addClass("theName");
$(this).removeClass("theName");

JQ psuedoclasses
:button
	:checkbox :checked :disabled
	:enabled :file :focus :image
	:input   (includes select, textarea and button) *
	:password :radio :reset :selected
	:submit :text

Traversal
	.children() (or .children("selector"), like .children("p"))
	.contents() (or ...)
	.first() (child)
	.last() (child)
	.parent() (or ...)
	.parents()   - Gives all ancestors from closest to farthest.
	.parentsUntil("item") or .parentsUntil("item", "filter")
	.siblings() (or ...)

.add() to queue up another selector
.end() back queue by 1 item

	.next() or .next("selector") //DFS
	.nextAll() or
	.nextUntil("Selector") or .nextUntil("slector","filter");
	.prev() or "selector"
	.prevAll() or ...
	.prevUntil("selector") or .prevUntil("sletor","filter")
	.slice(start [, end])

Adding / Reading Content

.append() / .appendTo()  (A.append(B) == A.appendTo(B)
.prepend() / .prependTo()
.html()
.text()
.after() / .insertAfter()
.before() / .insertBefore()
.wrap()
.wrapAll()
.wrapInner()

Removing Content

.unwrap()
.detach()
.empty()
.remove()
.replaceAll()
.replaceWith()